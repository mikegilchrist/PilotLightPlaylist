#!/usr/bin/env python3
# Purpose: Coordinate PilotLight scraper and playlist update, with dry-run & verbose modes
# Usage: python create_pilotlight_playlist.py [--dry-run/-n] [--verbose/-v]
# Date: 2025-08-04
# Version: 1.2.1
# Chat name: PilotLightPlaylist Orchestrator
# GPT Model: OpenAI o4-mini
# Attribution: Generated by Michael Gilchrist in collaboration with ChatGPT

import argparse
import subprocess
import sys

SCRAPER     = "pilotlight_scraper.py"
PLAYLIST    = "add_to_playlist.py"
ARTIST_FILE = "upcoming_artists_all.txt"

def parse_args():
    p = argparse.ArgumentParser(
        description="Run PilotLight scraper then update Spotify playlists"
    )
    p.add_argument(
        "--dry-run", "-n",
        action="store_true",
        help="Simulate actions; do NOT push updates to Spotify"
    )
    p.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Show full output from child scripts"
    )
    return p.parse_args()

def main():
    args = parse_args()

    # Build flags for each step
    scraper_flags  = []
    playlist_flags = []
    if args.verbose:
        scraper_flags.append("--verbose")
        playlist_flags.append("--verbose")
    if args.dry_run:
        playlist_flags.append("--dry-run")

    # Step 1: Run scraper (no dry-run support here)
    print(f"{'[DRY RUN] ' if args.dry_run else ''}Running scraper…")
    subprocess.run(
        [sys.executable, SCRAPER, "--week_stop", "-1"] + scraper_flags,
        check=True,
        stdout=(sys.stdout if args.verbose else None),
        stderr=(sys.stderr if args.verbose else None),
    )

    # Step 2: Run playlist update, forwarding dry-run & verbose
    print(f"{'[DRY RUN] ' if args.dry_run else ''}Running playlist update…")
    subprocess.run(
        [sys.executable, PLAYLIST, ARTIST_FILE] + playlist_flags,
        check=True,
        stdout=(sys.stdout if args.verbose else None),
        stderr=(sys.stderr if args.verbose else None),
    )

    print("All done.")

if __name__ == "__main__":
    main()
